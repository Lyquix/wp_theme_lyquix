//
// common.scss - Common CSS classes
//
// @version     3.0.0
// @package     wp_theme_lyquix
// @author      Lyquix
// @copyright   Copyright (C) 2015 - 2018 Lyquix
// @license     GNU General Public License version 2 or later
// @link        https://github.com/Lyquix/wp_theme_lyquix
//

//    .d8888b. 88888888888 .d88888b.  8888888b.   888
//   d88P  Y88b    888    d88P" "Y88b 888   Y88b  888
//   Y88b.         888    888     888 888    888  888
//    "Y888b.      888    888     888 888   d88P  888
//       "Y88b.    888    888     888 8888888P"   888
//         "888    888    888     888 888         Y8P
//   Y88b  d88P    888    Y88b. .d88P 888          "
//    "Y8888P"     888     "Y88888P"  888         888

//  DO NOT MODIFY THIS FILE!

// Clear
@mixin common-clear {
	.clr,
	.clear {
		clear: both;
	}

	// Clear fix (clears after the element)
	.cf,
	.clearfix {
		&::before,
		&::after {
			content: " ";
			display: table;
		}

		&::after {
			clear: both;
		}

		*zoom: 1;
	}
}

// Float
@mixin common-float {
	.float-left {
		float: left;

		// add margins
		&.margins {
			margin-right: $blk-margin-left-right;
			margin-bottom: $blk-margin-top-bottom;
		}
	}

	.float-right {
		float: right;

		// add margins
		&.margins {
			margin-left: $blk-margin-left-right;
			margin-bottom: $blk-margin-top-bottom;
		}
	}
}

// Hide & show classes
@mixin common-hide-show {
	.hide,
	.off {
		display: none;
	}

	.show,
	.on {
		display: inherit;
		display: unset;
	}

	// Hide & show for desktop
	body:not(.mobile, .tablet, .phone) {
		.desktop-hide {
			display: none;
		}

		.desktop-show {
			display: inherit;
			display: unset;
		}
	}

	// Hide & show for mobile devices
	body.mobile {
		.mobile-hide,
		.tablet-hide,
		.phone-hide {
			display: none;
		}

		.mobile-show,
		.tablet-show,
		.phone-show {
			display: inherit;
			display: unset;
		}
	}

	// Show and hide for devices, browsers, o/s, home
	$show-hide-names: tablet phone msie firefox chrome safari windows macosx ios
		android home;

	@each $n in $show-hide-names {
		body.#{$n} {
			.#{$n}-hide {
				display: none;
			}
			.#{$n}-show {
				display: inherit;
				display: unset;
			}
		}
	}

	// Hide & show for screen sizes
	@each $screen-name, $value in $breakpoints {
		@include screen($screen-name) {
			.#{$screen-name}-hide {
				display: none;
			}
			.#{$screen-name}-show {
				display: inherit;
				display: unset;
			}
		}
	}
}

@mixin common-font-text {
	// Font family type
	.font-serif {
		font-family: $font-serif;
	}

	.font-sans-serif {
		font-family: $font-sans-serif;
	}

	.font-monospace {
		font-family: $font-monospace;
	}

	// Font weight
	.font-thin {
		font-weight: 100;
	}

	.font-extralight {
		font-weight: 200;
	}

	.font-light {
		font-weight: 300;
	}

	.font-normal {
		font-weight: 400;
	}

	.font-medium {
		font-weight: 500;
	}

	.font-demibold {
		font-weight: 600;
	}

	.font-bold {
		font-weight: 700;
	}

	.font-heavy {
		font-weight: 800;
	}

	.font-black {
		font-weight: 900;
	}

	.text-uppercase {
		text-transform: uppercase;
	}

	.text-lowercase {
		text-transform: lowercase;
	}

	.text-capitalize {
		text-transform: capitalize;
	}

	// Letter spacing
	.text-tighter {
		letter-spacing: -0.1em;
	}

	.text-tight {
		letter-spacing: -0.05em;
	}

	.text-loose {
		letter-spacing: 0.05em;
	}

	.text-looser {
		letter-spacing: 0.1em;
	}

	// Text alignment
	.text-left {
		text-align: left;
	}

	.text-center {
		text-align: center;
	}

	.text-right {
		text-align: right;
	}

	.text-justify {
		text-align: justify;
	}

	// Text decoration
	.text-underline {
		text-decoration: underline;
	}

	.text-strikeout {
		text-decoration: line-through;
	}

	.text-overline {
		text-decoration: overline;
	}

	// Text direction
	.text-rtl {
		direction: rtl;
	}

	.text-ltr {
		direction: ltr;
	}

	// Text wrapping
	.text-wrap {
		white-space: normal;
	}

	.text-nowrap {
		white-space: nowrap;
	}

	.font-historical-forms {
		font-variant-alternates: historical-forms;
	}

	.font-small-caps {
		font-variant-caps: small-caps;
	}

	.font-all-small-caps {
		font-variant-caps: all-small-caps;
	}

	.font-petite-caps {
		font-variant-caps: petite-caps;
	}

	.font-all-petite-caps {
		font-variant-caps: all-petite-caps;
	}

	.font-unicase {
		font-variant-caps: unicase;
	}

	.font-tilting-caps {
		font-variant-caps: titling-caps;
	}

	.font-ordinal {
		font-variant-numeric: ordinal;
	}

	.font-slashed-zero {
		font-variant-numeric: slashed-zero;
	}

	.font-oldstyle-nums {
		font-variant-numeric: oldstyle-nums;
	}

	.font-tabular-nums {
		font-variant-numeric: tabular-nums;
	}

	.font-diagonal-fractions {
		font-variant-numeric: diagonal-fractions;
	}

	.font-stacked-fractions {
		font-variant-numeric: stacked-fractions;
	}

	.font-superscript {
		font-variant-position: super;
	}

	.font-subscript {
		font-variant-position: sub;
	}

	.font-ligatures {
		font-variant-ligatures: normal;
	}

	.font-common-ligatures {
		font-variant-ligatures: common-ligatures;
	}

	.font-discretionary-ligatures {
		font-variant-ligatures: discretionary-ligatures;
	}

	.font-historical-ligatures {
		font-variant-ligatures: historical-ligatures;
	}

	.font-ligatures-contextual {
		font-variant-ligatures: contextual;
	}

	.font-kerning {
		font-kerning: normal;
	}

}

@mixin common-color {
	$colors: color-primary color-secondary color-accent-1 color-accent-2 color-accent-3 color-accent-4 color-accent-5 gray;
	$class-props: (
		text: color,
		bg: background-color,
		border: border-color
	);

	// Text color classes
	@each $class-name, $prop-name in $class-props {
		@each $color in $colors {
			#{'.' + $class-name + '-' + $color} {
				#{$prop-name}: var(#{'--' + $color});
			}

			@for $s from 1 through 10 {
				#{'.' + $class-name + '-' + $color + '-lighter-' + $s} {
					#{$prop-name}: var(#{'--' + $color + '-lighter-' + $s});
				}
				#{'.' + $class-name + '-' + $color + '-darker-' + $s} {
					#{$prop-name}: var(#{'--' + $color + '-darker-' + $s});
				}
			}
		}
	}
}

// Columns
@mixin common-columns {
	@for $c from 1 through 10 {
		.columns-#{$c} {
			column-count: #{$c};
		}
	}

	@each $screen-name, $value in $breakpoints {
		$i: index(map-keys($breakpoints), $screen-name);

		@include screen($screen-name) {
			@for $c from 1 through 10 {
				.columns-#{$c}-#{$screen-name} {
					column-count: #{$c};
					column-gap: 2 * (nth($blk-margin-left-right, $i) + nth($blk-border-left-right, $i) + nth($blk-padding-left-right, $i));
				}
			}
		}
	}
}

@mixin common-video {
	// Responsive video container 16:9 (HD)
	.video-16-9 {
		position: relative;
		padding-bottom: 56.25%;
		height: 0;
		overflow: hidden;

		iframe,
		object,
		embed,
		video {
			position: absolute;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
		}
	}

	// Responsive video container 4:3 (SD)
	.video-4-3 {
		position: relative;
		padding-bottom: 75%;
		height: 0;
		overflow: hidden;

		iframe,
		object,
		embed,
		video {
			position: absolute;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
		}
	}
}

@mixin common-rotate-scale {
	// Rotate
	@for $a from 0 through 72 {
		.rotate-#{$a * 5} {
			transform: rotate(#{$a * 15}deg);
		}
	}

	// Rotate on hover
	@for $a from 0 through 72 {
		.rotate-#{$a * 5}-hover:hover {
			transform: rotate(#{$a * 15}deg);
		}
	}

	// Scale
	@for $p from 0 through 40 {
		.scale-#{$p * 5} {
			transform: scale(#{$p * 0.05});
		}
	}

	// Scale on hover
	@for $p from 0 through 40 {
		.scale-#{$p * 5}-hover:hover {
			transform: scale(#{$p * 0.05});
		}
	}
}

@mixin common-filter {
	// Filters
	$filter-names: brightness contrast grayscale invert opacity sepia;

	@each $f in $filter-names {
		@for $p from 0 through 20 {
			$pc: percentage($p * 0.05);
			.#{$f}-#{$p * 5} {
				filter: #{$f + "(" + $pc + ")"};
			}
		}

		// On hover
		@for $p from 0 through 20 {
			$pc: percentage($p * 0.05);
			.#{$f}-#{$p * 5}-hover:hover {
				filter: #{$f + "(" + $pc + ")"};
			}
		}
	}

	// Saturate
	@for $p from 0 through 40 {
		$pc: percentage($p * 0.05);
		.saturate-#{$p * 5} {
			filter: saturate($pc);
		}
	}

	// Saturate on hover
	@for $p from 0 through 40 {
		$pc: percentage($p * 0.05);
		.saturate-#{$p * 5}-hover:hover {
			filter: saturate($pc);
		}
	}

	// Hue rotate
	@for $a from 0 through 24 {
		.hue-rotate-#{$a * 15} {
			filter: hue-rotate(#{$a * 15}deg);
		}
	}

	// Hue rotate on hover
	@for $a from 0 through 24 {
		.hue-rotate-#{$a * 15}-hover:hover {
			filter: hue-rotate(#{$a * 15}deg);
		}
	}

	// Duotone rotate
	@for $a from 0 through 24 {
		.duotone-#{$a * 15} {
			filter: sepia(100%) hue-rotate(#{$a * 15}deg);
		}
	}

	// Duotone rotate on hover
	@for $a from 0 through 24 {
		.duotone-#{$a * 15}-hover:hover {
			filter: sepia(100%) hue-rotate(#{$a * 15}deg);
		}
	}
}

@mixin common-image-cover($background) {
	position: relative;
	z-index: 0;

	&::after {
		content: "";
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background: $background;
		z-index: 1;
	}
}

@mixin common-ellipsis($max-lines) {
	display: box;
	-webkit-line-clamp: $max-lines;
	-webkit-box-orient: vertical;
	overflow: hidden;
}
